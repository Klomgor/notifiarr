{
  "words": {
    "select-option": {
      "Off": "Off",
      "Enabled": "Enabled",
      "Disabled": "Disabled",
      "minute": "minute",
      "minutes": "minutes",
      "hour": "hour",
      "hours": "hours",
      "second": "second",
      "seconds": "seconds",
      "megabytes": "megabytes",
      "bytes": "bytes",
      "Daily": "Daily",
      "custom": "custom",
      "InstanceDisabled": "Instance Disabled",
      "NoTimeout": "No Timeout",
      "ChecksDisabled": "Checks Disabled"
    },
    "instance-options": {
      "interval": {
        "label": "Health Check Interval",
        "description": "How often to check the instance's reachability."
      },
      "timeout": {
        "label": "Request Timeout",
        "description": "How long to wait for a response from the instance."
      },
      "validSsl": {
        "label": "Validate SSL Certificate",
        "description": "Checking the box makes sure the instance is using a valid SSL certificate."
      },
      "deletes": {
        "label": "Delete Content",
        "description": "This limits the number of delete requests that may be sent to this instance in an hour.",
        "tooltip": "This controls how many delete requests are allowed per hour. A setting of 0 disables the ability to send delete requests. This refers to media deletes, but may include other actions. This is a throttle to prevent hackers from obliterating your content.",
        "countPerHour": "{count} per hour"
      }
    },
    "clock": {
      "days": {
        "Sunday": "Sunday",
        "Monday": "Monday",
        "Tuesday": "Tuesday",
        "Wednesday": "Wednesday",
        "Thursday": "Thursday",
        "Friday": "Friday",
        "Saturday": "Saturday"
      },
      "short": {
        "ms": "{milliseconds}ms",
        "s": "{seconds}s",
        "m": "{minutes}m",
        "h": "{hours}h",
        "d": "{days}d",
        "w": "{weeks}w"
      },
      "format": "{weeks}{days}{hours}{minutes}{seconds}{milliseconds}",
      "ago": "{timeDuration} ago"
    },
    "bytes": {
      "short": {
        "B": "{bytes} B",
        "KB": "{bytes} KB",
        "MB": "{bytes} MB",
        "GB": "{bytes} GB",
        "TB": "{bytes} TB"
      }
    }
  },
  "buttons": {
    "Login": "Login",
    "Confirm": "Confirm",
    "Cancel": "Cancel",
    "Save": "Save",
    "Close": "Close",
    "SaveChanges": "Save Changes",
    "SaveConfiguration": "Save Configuration",
    "ResetForm": "Reset Form",
    "NoStayHere": "No! Stay here",
    "YesDeleteMyChanges": "Yes! Delete my changes",
    "Execute": "Execute",
    "HideMenu": "Hide Menu",
    "ShowMenu": "Show Menu",
    "ShowOutput": "Show Output",
    "HideOutput": "Hide Output",
    "RefreshOutput": "Refresh Output"
  },
  "RegexTester": {
    "RegularExpressionTester": "Regular Expression Tester",
    "testPattern": {
      "label": "Test Pattern",
      "description": "Example string or log line to test the regular expression against.",
      "placeholder": "[INFO] 2025-05-25 16:20:01 - This is a test log line."
    },
    "testRegex": {
      "label": "Test Expression",
      "description": "Expression to match against the test pattern.",
      "placeholder": "GET .*some/path"
    },
    "TestResult": "Test Result",
    "Test": "Test",
    "Expression": "Expression",
    "Result": "Result",
    "NoMatch": "No Match"
  },
  "phrases": {
    "ERROR": "ERROR",
    "LoggingIn": "Logging in...",
    "LoggedIn": "Logged in!",
    "Loading": "Loading...",
    "UpdateBackend": "Update Backend",
    "BackEndUpdated": "Back-end updated {timeDuration} ago.",
    "UpdatingBackEnd": "Updating back-end...",
    "FailedToUpdateBackEnd": "Failed to update back-end: {error}",
    "TryRefreshingThePage": "Try refreshing the page.",
    "ConfigurationSavedReloading": "Configuration saved! Reloading client...",
    "ConfigurationSaved": "Configuration saved {timeDuration} ago!",
    "SavingConfiguration": "Saving configuration...",
    "Version": "Version {version}",
    "Every12Hours": "Every 12 hours",
    "Every6Hours": "Every 6 hours",
    "Every3Hours": "Every 3 hours",
    "Reloading": "Reloading...",
    "FailedToReload": "Failed to reload: {error}",
    "ConfirmReload": "Confirm Reload",
    "ConfirmReloadBody": "Are you sure you want to reload the client?",
    "ReloadSuccess": "Reload successful! Client reloaded.",
    "ReloadCheckTimedOut": "Server reload check timed out after 20 attempts",
    "ConfirmShutdown": "Confirm Shutdown",
    "ConfirmShutdownBody": "Are you sure you want to shutdown the client? You will need to restart it from the host it runs on.",
    "ShutdownSuccess": "Shutdown successful! Client stopped.",
    "FailedToShutdown": "Failed to shutdown: {error} - Try reloading the page.",
    "LoginHelp": "Login Help",
    "LoginHelpBody": "If you've forgotten your password, please see the <a href=\"https://notifiarr.wiki/pages/client/gui/#forgotten-passwords\" target=\"_new\">forgotten passwords</a> wiki page. If this is your first time logging in you can find your password in the client log file. If you provided an API key to the client before starting it for the first time, then your password is the API key.",
    "Changed": "Changed",
    "New": "New",
    "Invalid": "Invalid",
    "DeleteInstance": "Delete Instance",
    "DeletedNumber": "Deleted {number}",
    "ItsGone": "It's gone! Don't forget to save.",
    "URLMustBeginWithHttp": "URL must begin with http:// or https://",
    "NameMustNotBeEmpty": "Name must not be empty.",
    "HostMustNotBeEmpty": "Host must not be empty.",
    "UsernameMustNotBeEmpty": "Username must not be empty.",
    "NameInUseByInstance": "This name is in use by instance {number}.",
    "APIKeyMustBeCountCharacters": "API key must be {count} characters or longer.",
    "TokenMustBeCountCharacters": "Token must be {count} characters or longer.",
    "LeavePage": "Do you really want to leave this page?",
    "Landing": {
      "SelectASection": "Select a section from the navigation menu to get started.",
      "Welcome": "Welcome, {username}!"
    }
  },
  "navigation": {
    "titles": {
      "Settings": "Settings",
      "Insights": "Insights",
      "Configuration": "Configuration",
      "SiteTunnel": "Site Tunnel",
      "StarrApps": "Starr Apps",
      "Downloaders": "Download Apps",
      "MediaApps": "Media Apps",
      "SnapshotApps": "Snapshot Apps",
      "FileWatcher": "File Watcher",
      "Endpoints": "Endpoints",
      "Commands": "Commands",
      "Services": "Services",
      "Actions": "Actions",
      "Integrations": "Integrations",
      "Monitoring": "Monitoring",
      "Metrics": "Metrics",
      "LogFiles": "Log Files",
      "System": "System",
      "TrustProfile": "Trust Profile",
      "Landing": "Notifiarr Home",
      "UnsavedChanges": "Unsaved Changes"
    },
    "pageDescription": {
      "Configuration": "Configure your Notifiarr client settings here.",
      "SiteTunnel": "This client keeps a persistent websocket connection to notifiarr.com using a <a href=\"https://github.com/golift/mulery\" target=\"_new\">Mulery tunnel</a>. This tunnel allows the website to make requests to your client without the need for opening a port, or having a static IP. This page allows you to select your primary tunnel and which tunnel you wish to use as backup in case the primary becomes inaccessible.",
      "StarrApps": "Setup Starr integrations.",
      "Downloaders": "Manage download clients.",
      "MediaApps": "Manage media players and related services.",
      "SnapshotApps": "Most snapshot configurations are on the Notifiarr.com website. Below you will find Application 'plugin' settings for the snapshot feature.",
      "FileWatcher": "Watch for file changes and trigger actions! This Notifiarr client can watch (log) files for lines matching a regular expression. This is similar to <code>tail -f file | grep string</code> and allows you to send notifications when, for instance, a log file has a new line written that matches a regular expression.",
      "Endpoints": "Configure relay endpoint URLs and their schedules.",
      "Commands": "Set up and execute custom commands and scripts.",
      "Services": "The Notifiarr client application is capable of monitoring services via HTTP checks, TCP port checks or process running (and not running) checks. <b>The client service checks work with the Notifiarr.com Network Integration.</b>",
      "Actions": "Find internal Notifiarr client actions here. These are executed by timers, schedules, and events from the website or a chat server. While usually reserved for troubleshooting, you may trigger them manually in this interface.",
      "Integrations": "View action statistics and for all integrations.",
      "Monitoring": "View service and network health.",
      "Metrics": "View metric totals for client configurations.",
      "LogFiles": "View and manage client log files.",
      "System": "View system and client information and.",
      "TrustProfile": "Configure how you log into this Notifiarr client application.",
      "Landing": "This is the greatest place on Earth!"
    }
  },
  "config": {
    "errors": {
      "InvalidCreds": "Invalid username or password.",
      "LoginRequestTimedOut": "Login request timed out",
      "LoginFailed": "Login failed: {error}",
      "ProfileReqTimedOut": "Profile request timed out",
      "AnUnknownErrorOccurred": "An unknown error occurred",
      "ConfigUpdateFailed": "Configuration update failed: {error}",
      "PleaseEnterBothUsernameAndPassword": "Please enter both username and password."
    },
    "titles": {
      "Configuration": "Configuration",
      "General": "General",
      "Network": "Network",
      "System": "System",
      "WatchFile": "Watch File",
      "Endpoint": "Endpoint",
      "Command": "Command",
      "SSLConfiguration": "SSL Configuration",
      "Services": "Services",
      "Logging": "Logging",
      "Dark": "Dark",
      "Light": "Light"
    },
    "apiKey": {
      "label": "API Key",
      "description": "API key from your Notifiarr.com account.",
      "tooltip": "Find this by logging into Notifiarr.com, go to Profile then API Keys.",
      "placeholder": "Enter your API key here"
    },
    "extraKeys": {
      "label": "Extra Keys",
      "description": "Additional API keys for third-party integrations. Separate with newlines.",
      "placeholder": "One per line..."
    },
    "bindAddr": {
      "label": "Bind Address",
      "description": "IP and port the app will listen on. Use 0.0.0.0 to listen on all interfaces.",
      "placeholder": "0.0.0.0:5454"
    },
    "sslKeyFile": {
      "label": "SSL Key File",
      "description": "Path to SSL key file",
      "placeholder": "/path/to/ssl-key.pem",
      "tooltip": "This application can serve HTTPS. Enable that by specifying a certificate file path and key file path."
    },
    "sslCertFile": {
      "label": "SSL Certificate File",
      "description": "Path to SSL certificate file",
      "placeholder": "/path/to/ssl-cert.pem",
      "tooltip": "This application can serve HTTPS. Enable that by specifying a certificate file path and key file path."
    },
    "debug": {
      "label": "Debug Logging",
      "description": "Enable or disable debug logging.",
      "tooltip": "Enabling Debug will write a lot more data to the log. Use Max Body settings to control payloads sizes."
    },
    "quiet": {
      "label": "Quiet Logging",
      "description": "Enable or disable quiet logging.",
      "tooltip": "Enabling Quiet makes the app not print anything to stdout. This is useful when a log file is enabled and you don't want logs spewing into a startup daemon too."
    },
    "logFile": {
      "label": "Application Log File",
      "description": "Path to the application log file.",
      "placeholder": "/path/to/notifiarr.log"
    },
    "httpLog": {
      "label": "HTTP Log File",
      "description": "Path to the HTTP log file.",
      "placeholder": "/path/to/http-notifiarr.log",
      "tooltip": "Setting a log file path here will make the application write the HTTP logs to a dedicated file. The file format is in apache log. Highly recommended."
    },
    "debugLog": {
      "label": "Debug Log File",
      "description": "Path to the debug log file.",
      "placeholder": "/path/to/debug-notifiarr.log",
      "tooltip": "Setting a log file path here will make the application write the debug logs to a dedicated file. Debug logs are written to the application log file when this is unset."
    },
    "maxBody": {
      "label": "Max Body Size",
      "description": "Maximum body size for HTTP requests.",
      "tooltip": "When debug is enabled, this setting limits the amount of payload data written to the log, to or from Notifiarr.com."
    },
    "logFileMb": {
      "label": "Log File Size",
      "description": "Maximum size of the log file before rotation.",
      "tooltip": "When rotation is enabled (setting Max Log File Count higher than 1), this setting controls how large a file must be to trigger rotation."
    },
    "logFiles": {
      "label": "Log File Count",
      "description": "Number of log files to keep.",
      "tooltip": "When this setting is 0 or 1, log file rotation is disabled. This setting applies to all log files, and will keep this many of each on disk."
    },
    "noUploads": {
      "label": "Deny Uploads",
      "description": "<b>Disabled</b> allows Notifiarr.com administrators to make this client upload log files to the website. <b>Enabled</b> prevents log file uploads..",
      "tooltip": "This setting controls the Notifiarr.com website and Notifiarr administrators' ability to trigger this client to upload log files to the website. Sometimes we need to see log entries while diagnosing problems and this trigger allows us to make the client upload the app and debug log files."
    },
    "snapshot": {
      "timeout": { "label": "Timeout", "description": "Timeout for snapshot operations." }
    },
    "services": {
      "disabled": {
        "label": "Service Checks",
        "description": "Enable or disable service checks.",
        "tooltip": "Disable or enable monitoring all network and service checks right here."
      },
      "parallel": {
        "label": "Parallel Checks",
        "description": "Number of parallel service checks.",
        "tooltip": "Normally running service checks 1 at a time is fine, but if you have more than 30 or 40, you may want to increase this."
      },
      "interval": {
        "label": "Update Interval",
        "description": "Update interval for service checks.",
        "tooltip": "Subscribers can update more often."
      },
      "logFile": {
        "label": "Services Log File",
        "description": "Path to the services log file.",
        "tooltip": "The log file is used to store the service check results. If left unset, the service check output is written to the application log file.",
        "placeholder": "/path/to/services-notifiarr.log"
      }
    },
    "ui": {
      "darkMode": { "label": "Dark Mode", "description": "Enable or disable dark mode." },
      "language": {
        "label": "Language",
        "description": "Language of the application frontend."
      }
    },
    "watchFile": {
      "path": { "label": "File Path", "description": "Path to the file to watch." }
    },
    "endpoint": { "name": { "label": "Name", "description": "Name of the endpoint." } },
    "command": { "name": { "label": "Name", "description": "Name of the command." } },
    "service": { "name": { "label": "Name", "description": "Name of the service." } },
    "urlbase": {
      "label": "URL Base",
      "description": "This application serves HTTP on / by default. You can change that by typing in something else here.",
      "placeholder": "/notifiarr/",
      "tooltip": "Example: /notifiarr/"
    },
    "hostId": {
      "label": "Host ID",
      "description": "The Host ID parameter is used to uniquely identify this client installation.",
      "tooltip": "Changing this value is discouraged; it should be found automatically. Do not copy this value to another Notifiarr client installation."
    },
    "serial": {
      "label": "Parallel Threads",
      "description": "Disabling this setting will make the application use fewer go routines (threads) when gathering data from configured applications.",
      "tooltip": "Spreads out CPU usage and lowers memory footprint."
    },
    "retries": {
      "label": "Retries",
      "description": "Sometimes connections to Notifiarr.com fail. This controls how many times each request will be attempted in case of failures.",
      "tooltip": "Default: 4 (setting 0 uses default of 4)"
    },
    "apt": {
      "label": "APT Hook",
      "description": "The Notifiarr Debian (and Ubuntu) packages include an APT integration.",
      "tooltip": "The Notifiarr Debian (and Ubuntu) packages include an APT integration. This integration invokes every time an <b class=\"text-warning\">apt</b> command is executed. To enable it, set this field to Enabled, and then <b>enable the Package Manager integration on Notifiarr.com.</b> This feature does not require the client to be running; it only requires the client deb package to be installed. This does not work on RHEL or non-Debian Linux."
    },
    "timeout": {
      "label": "Timeout",
      "description": "This is the timeout for API requests to Notifiarr.com."
    },
    "fileMode": {
      "label": "Log File Unix Mode",
      "description": "This is the unix file mode used when writing new log files.",
      "tooltip": "Recommended values in order of openness: 0600, 0640, 0644"
    },
    "autoUpdate": {
      "label": "Auto Update",
      "description": "This is how often the application will check for updates. When one is found it will be installed automatically.",
      "tooltip": "This only works on Windows."
    },
    "unstableCh": {
      "label": "Unstable Channel",
      "description": "Enabling the unstable updates channel will make the application check the unstable website for auto-updates instead of GitHub.",
      "tooltip": "Only available to users with developer access."
    }
  },
  "profile": {
    "title": { "Authentication": "Authentication", "Authorization": "Authorization" },
    "phrase": {
      "ShowMoreDesc": "Three authentication types are currently supported. Auth Proxy and No Password are only available if the current request comes from a valid, configured upstream IP address.",
      "PasswordOnlyUsed": "Username and Password are only used if Authentication Type is set to Password.",
      "HeaderOnlyUsed": "Auth Header is only used if Authentication Type is <b>not</b> set to Password.",
      "AuthTypeChange": "If Authentication Type changes, log out to complete the process.",
      "ProfileUpdated": "Profile updated successfully {timeDuration} ago!",
      "EnterCurrentPassword": "Enter your current password to make changes.",
      "ProxyAuthDisabled": "Proxy authentication is disabled because your upstream ({upstreamIp}) is not in the allowed upstreams list.",
      "Addit": "Add it.",
      "SeeWikiForAuthProxyHelp": "See <a href=\"https://notifiarr.wiki/pages/client/reverseProxy/\" target=\"_new\">the wiki</a> for instructions setting up an authentication proxy.",
      "ShowMeMore": "Show me more.",
      "ShowMeLess": "Show me less."
    },
    "authType": {
      "label": "Authentication Type",
      "description": "Select how to authenticate with the client",
      "options": {
        "password": "Password: Local Username",
        "header": "Auth Proxy: Header",
        "noauth": "No Password (danger)"
      },
      "option_desc": {
        "password": " This is the default authentication type. Select the Password option to log into this application with a configured username and password. Only 1 username and password is supported. When selecting this option, you must fill in the username and new password fields. If this is the current authentication type you must also fill in the current password field to make changes.",
        "header": "Select this option to log into this application using an HTTP header that contains a username. This is commonly known as proxy authentication. We have <a href=\"https://notifiarr.wiki/pages/client/reverseProxy/\" target=\"_new\">a wiki page</a> that provides instructions to configure Nginx for this feature. When selecting this option, you must also select a header for the auth proxy. If no headers are displayed, then no valid headers were provided by the upstream proxy.",
        "noauth": "This configuration is not recommended. The No Password authentication type allows any request from any configured <code>upstream IP</code>. It also works with an auth proxy to set the username. If no username is in the provided header, then it defaults to admin."
      }
    },
    "upstreams": {
      "label": "Upstreams",
      "description": "Trusted proxy IP or CIDR networks. Separate networks with spaces.",
      "placeholder": "127.0.0.1 ::1",
      "tooltip": "If Notifiarr client is behind a reverse proxy (swag, nginx, etc), then you should add that proxy's IP here. You can also specify full networks. This controls which IP is written to the web server log file, requester or <span class=\"text-warning\">X-Forwarded-For</span> header. Required when using a request header for authentication, or when authentication is disabled."
    },
    "header": {
      "label": "Auth Header",
      "description": "Select the header containing your username",
      "tooltip": "This displays headers that are provided by the client or upstream that may be used for proxy authentication. This selection is used if Authentication Type is set to Header or No Password. Choose the header that displays your proper username. When using No Password, the header is used to set the username, but is not required."
    },
    "username": {
      "label": "Username",
      "description": "Your login username",
      "placeholder": "Default: admin"
    },
    "password": {
      "label": "Current Password",
      "description": "Your login password",
      "placeholder": "Enter current password"
    },
    "newPass": {
      "label": "New Password",
      "description": "Your new login password",
      "placeholder": "9 character minimum"
    }
  },
  "system": {
    "BuildInformation": {
      "title": "Build Information",
      "Branch": "Branch",
      "BuildUser": "Build User",
      "BuildDate": "Build Date",
      "GoVersion": "Go Version",
      "Integrity": "Integrity"
    },
    "OperatingSystem": {
      "title": "Operating System",
      "Hostname": "Hostname",
      "UniqueID": "Unique ID",
      "Platform": "Platform",
      "KernelVersion": "Kernel Version",
      "VirtualizationSystem": "Virtualization System"
    },
    "ClientInformation": {
      "title": "Client Information",
      "Application": "Application",
      "Version": "Version",
      "Started": "Started",
      "Uptime": "Uptime"
    },
    "StorageData": {
      "title": "Storage Data",
      "Total": "Total",
      "Used": "Used",
      "Free": "Free",
      "FS": "FS",
      "ro": "ro"
    },
    "NetworkInformation": {
      "title": "Network Information",
      "IPAddress": "IP Address",
      "Gateway": "Gateway",
      "Netmask": "Netmask",
      "Interface": "Interface"
    },
    "StartupParams": {
      "title": "Startup Parameters",
      "BinaryPath": "Binary Path",
      "ConfigFile": "Config File",
      "EnvironmentPrefix": "Environment Prefix",
      "ExtraConfigFiles": "Extra Config Files",
      "CustomAssets": "Custom Assets",
      "UserID": "User ID",
      "GroupID": "Group ID",
      "IPAddress": "IP Address"
    },
    "UserInformation": {
      "title": "User Information",
      "Patron": "Patron",
      "Subscriber": "Subscriber",
      "AbsoluteBadAss": "Absolute Bad Ass",
      "YesYesYouAre": "Yes, yes you are! 💚",
      "HellaAwesome": "Hella Awesome",
      "YoureSoGifted": "You're so gifted, and we love you! 💜",
      "DateFormat": "Date Format"
    },
    "EnvironmentVariables": { "title": "Environment Variables" }
  },
  "MediaApps": {
    "Plex": {
      "title": "Plex",
      "description": "The Plex integration is comprehensive, and many of the settings are configured on the <a href=\"https://notifiarr.com/\" target=\"_new\">Notifiarr.com website</a>.",
      "name": {
        "label": "Server Name",
        "description": "Name of the Plex server.",
        "placeholder": "Set automatically by server"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Plex server.",
        "placeholder": "http://plex.server.tv:32400"
      },
      "token": {
        "label": "Token",
        "description": "Token for the Plex server.",
        "placeholder": "pl3x-to_Ken",
        "tooltip": "You may find directions for locating your Plex token at <a href=\"https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/\" target=\"_new\">this Plex Article</a>."
      }
    },
    "Tautulli": {
      "title": "Tautulli",
      "description": "Tautulli provides a feature that allows you to give your Plex users custom usernames. By integrating Notifiarr client with Tautulli, those custom usernames will be displayed in your chat server notifications. When not enabled, Plex usernames or email addresses are used instead. This is entirely optional. The Notifiarr website also provides this same feature and allows you to map Plex users to custom names. You may also add a Tuaitulli instance here simply to monitor it with service checks.",
      "name": {
        "label": "Tautulli Name",
        "description": "Name of the Tautulli service."
      },
      "url": {
        "label": "URL",
        "description": "URL of the Tautulli service.",
        "placeholder": "http://tautulli.server.tv:8181"
      },
      "apiKey": {
        "label": "API Key",
        "description": "API key for the Tautulli service.",
        "placeholder": "tautulli-api-key"
      }
    }
  },
  "SnapshotApps": {
    "MySQL": {
      "title": "MySQL",
      "description": "You may add MySQL credentials to your Notifiarr client configuration to snapshot MySQL service health. This feature snapshots <code>SHOW PROCESSLIST</code> and <code>SHOW STATUS</code> data. Access to a database is not required. Example Grant: <code>GRANT PROCESS ON *.* to 'notifiarr'@'localhost'</code>",
      "addInstance": "Add MySQL Server",
      "name": {
        "label": "Server Name",
        "description": "Name of the MySQL server.",
        "placeholder": "custom name for notifications"
      },
      "host": {
        "label": "Host",
        "description": "Host or IP address of the MySQL server.",
        "placeholder": "127.0.0.1"
      },
      "port": {
        "label": "Port",
        "description": "Port of the MySQL server.",
        "placeholder": "3306"
      },
      "username": {
        "label": "Username",
        "description": "Username for the MySQL server.",
        "placeholder": "root"
      },
      "password": {
        "label": "Password",
        "description": "Password for the MySQL server.",
        "placeholder": "password"
      }
    },
    "Nvidia": {
      "title": "Nvidia",
      "description": "This integration displays Nvidia CUDA info in Snapshot notifications. To use this feature in Docker, you must use the CUDA image: <code>ghcr.io/notifiarr/notifiarr:cuda</code>",
      "disabled": {
        "label": "GPU Snapshots",
        "description": "Enable or disable GPU snapshots."
      },
      "busIds": {
        "label": "Bus IDs",
        "description": "Comma separated list of bus IDs to snapshot.",
        "placeholder": "0000:00:00.0,0000:00:00.1",
        "tooltip": "This is the bus ID of the GPU. You can find this by running <code>nvidia-smi</code> and looking at the <code>Bus Id</code> column. Cards with other Bus IDs are ignored in the snapshot. Generally, just leave this blank. Add multiple with newlines."
      },
      "smiPath": {
        "label": "nvidia-smi Path",
        "description": "Path to the nvidia-smi command.",
        "placeholder": "/usr/bin/nvidia-smi",
        "tooltip": "If nvidia-smi (nvidia-smi.exe on Windows) is not in the PATH environment, then you may provide a full path to the binary here."
      }
    }
  },
  "StarrApps": {
    "Radarr": {
      "title": "Radarr",
      "addInstance": "Add Radarr Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Radarr instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Radarr instance.",
        "placeholder": "http://radarr.server.tv:7878"
      },
      "apiKey": {
        "label": "API Key",
        "description": "API key for the Radarr instance.",
        "placeholder": "radarr-api-key"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Radarr instance.",
        "placeholder": "admin",
        "tooltip": "You only need a username and password if you want to check database backups since those cannot be downloaded through the API."
      },
      "password": {
        "label": "Password",
        "description": "Password for the Radarr instance.",
        "placeholder": "password"
      }
    },
    "Sonarr": {
      "title": "Sonarr",
      "addInstance": "Add Sonarr Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Sonarr instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Sonarr instance.",
        "placeholder": "http://sonarr.server.tv:8989"
      },
      "apiKey": {
        "label": "API Key",
        "description": "API key for the Sonarr instance.",
        "placeholder": "sonarr-api-key"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Sonarr instance.",
        "placeholder": "admin",
        "tooltip": "You only need a username and password if you want to check database backups since those cannot be downloaded through the API."
      },
      "password": {
        "label": "Password",
        "description": "Password for the Sonarr instance.",
        "placeholder": "password"
      }
    },
    "Readarr": {
      "title": "Readarr",
      "addInstance": "Add Readarr Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Readarr instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Readarr instance.",
        "placeholder": "http://readarr.server.tv:8787"
      },
      "apiKey": {
        "label": "API Key",
        "description": "API key for the Readarr instance.",
        "placeholder": "readarr-api-key"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Readarr instance.",
        "placeholder": "admin",
        "tooltip": "You only need a username and password if you want to check database backups since those cannot be downloaded through the API."
      },
      "password": {
        "label": "Password",
        "description": "Password for the Readarr instance.",
        "placeholder": "password"
      }
    },
    "Lidarr": {
      "title": "Lidarr",
      "addInstance": "Add Lidarr Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Lidarr instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Lidarr instance.",
        "placeholder": "http://lidarr.server.tv:8686"
      },
      "apiKey": {
        "label": "API Key",
        "description": "API key for the Lidarr instance.",
        "placeholder": "lidarr-api-key"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Lidarr instance.",
        "placeholder": "admin",
        "tooltip": "You only need a username and password if you want to check database backups since those cannot be downloaded through the API."
      },
      "password": {
        "label": "Password",
        "description": "Password for the Lidarr instance.",
        "placeholder": "password"
      }
    },
    "Prowlarr": {
      "title": "Prowlarr",
      "addInstance": "Add Prowlarr Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Prowlarr instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Prowlarr instance.",
        "placeholder": "http://prowlarr.server.tv:9696"
      },
      "apiKey": {
        "label": "API Key",
        "description": "API key for the Prowlarr instance.",
        "placeholder": "prowlarr-api-key"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Prowlarr instance.",
        "placeholder": "admin",
        "tooltip": "You only need a username and password if you want to check database backups since those cannot be downloaded through the API."
      },
      "password": {
        "label": "Password",
        "description": "Password for the Prowlarr instance.",
        "placeholder": "password"
      }
    }
  },
  "Downloaders": {
    "Qbittorrent": {
      "title": "Qbittorrent",
      "addInstance": "Add Qbittorrent Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Qbittorrent instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Qbittorrent instance.",
        "placeholder": "http://qbittorrent.server.tv:8080"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Qbittorrent instance.",
        "placeholder": "admin"
      },
      "password": {
        "label": "Password",
        "description": "Password for the Qbittorrent instance.",
        "placeholder": "password"
      }
    },
    "Rtorrent": {
      "title": "Rtorrent",
      "addInstance": "Add Rtorrent Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Rtorrent instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Rtorrent instance.",
        "placeholder": "http://rtorrent.server.tv:8080"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Rtorrent instance.",
        "placeholder": "admin"
      },
      "password": {
        "label": "Password",
        "description": "Password for the Rtorrent instance.",
        "placeholder": "password"
      }
    },
    "Transmission": {
      "title": "Transmission",
      "addInstance": "Add Transmission Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Transmission instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Transmission instance.",
        "placeholder": "http://transmission.server.tv:9091"
      },
      "username": {
        "label": "Username",
        "description": "Username for the Transmission instance.",
        "placeholder": "admin"
      },
      "password": {
        "label": "Password",
        "description": "Password for the Transmission instance.",
        "placeholder": "password"
      }
    },
    "Deluge": {
      "title": "Deluge",
      "addInstance": "Add Deluge Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the Deluge instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the Deluge instance.",
        "placeholder": "http://deluge.server.tv:8112"
      },
      "password": {
        "label": "Password",
        "description": "Password for the Deluge instance.",
        "placeholder": "password"
      }
    },
    "SabNZB": {
      "title": "SabNZB",
      "addInstance": "Add SabNZB Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the SabNZB instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the SabNZB instance.",
        "placeholder": "http://sabnzb.server.tv:8080"
      },
      "apiKey": {
        "label": "API Key",
        "description": "API key for the SabNZB instance.",
        "placeholder": "sabnzb-api-key"
      }
    },
    "NZBGet": {
      "title": "NZBGet",
      "addInstance": "Add NZBGet Instance",
      "name": {
        "label": "Instance Name",
        "description": "Name of the NZBGet instance.",
        "placeholder": "custom name for notifications"
      },
      "url": {
        "label": "URL",
        "description": "URL of the NZBGet instance.",
        "placeholder": "http://nzbget.server.tv:6789"
      },
      "username": {
        "label": "Username",
        "description": "Username for the NZBGet instance.",
        "placeholder": "admin"
      },
      "password": {
        "label": "Password",
        "description": "Password for the NZBGet instance.",
        "placeholder": "password"
      }
    }
  },
  "SiteTunnel": {
    "subText": "Click the <span class=\"text-success\">Ping Tunnels</span> button, and select the tunnel with the fastest response time as your primary. Select another fast tunnel as backup.",
    "phrases": {
      "PrimaryTunnel": "Primary Tunnel",
      "BackupTunnel": "Backup Tunnel",
      "Ping": "Ping Tunnels",
      "Pinging": "Pinging ...",
      "ActiveTunnel": "Active Tunnel: {tunnel}",
      "TunnelStats": "Tunnel Stats",
      "Disconnects": "Disconnects",
      "ConnectionPoolSize": "Connection Pool Size",
      "Connecting": "Connecting",
      "Idle": "Idle",
      "Running": "Running",
      "LastConnection": "Last Connection",
      "LastActiveCheck": "Last Active Check",
      "SocketURLActive": "Socket URL (active)",
      "SocketURLInactive": "Socket URL (inactive)",
      "SelectTunnel": "Select a tunnel",
      "TunnelsSaved": "Tunnels saved {timeDuration} ago!",
      "TunnelStatsStale": "The data above is always stale. To update it, click the update backend link in the page header."
    }
  },
  "FileWatcher": {
    "title": "Watched Files",
    "description": "You must enable the Log Watcher feature and choose a channel on the Notifiarr website for this to work!",
    "addInstance": "Watch Another File",
    "DeleteWatcher": "Delete Watcher",
    "badges": {
      "CurrentlyWatching": "Currently Watching",
      "WatcherStopped": "Watcher Stopped"
    },
    "buttons": { "StopWatcher": "Stop Watcher", "StartWatcher": "Start Watcher" },
    "titles": {
      "RegularExpressionTester": "Regular Expression Tester",
      "Expression": "Expression",
      "TestString": "Test String"
    },
    "path": {
      "label": "File Path",
      "description": "Path to the file to watch. Recommend absolute path names.",
      "placeholder": "/var/log/nginx/access.log",
      "required": "Path is required"
    },
    "disabled": { "label": "Active", "description": "Disable this watcher." },
    "regex": {
      "label": "Regular Expression",
      "description": "Regex to match against the file.",
      "tooltip": "Expressions are automatically wrapped in a wildcard matcher: <code>.*</code> so do not use <code>^</code> or <code>$</code> in your expression. Use <code>(?i)</code> as a prefix to make regular expressions case insensitive.",
      "placeholder": "GET.*some/path",
      "required": "Regex is required"
    },
    "skip": {
      "label": "Skip Expressions",
      "description": "Anything matching this expression is ignored.",
      "placeholder": "GET.*some/path"
    },
    "poll": {
      "label": "File Polling",
      "description": "Poll file for changes.",
      "tooltip": "File system events do not work on some systems. If nothing is being matched, turn this on to enable the file poller interval."
    },
    "pipe": {
      "label": "FIFO Pipe",
      "description": "Path is a named FIFO pipe.",
      "tooltip": "Enable this if the file you're watching is a named FIFO pipe. You probably don't need this."
    },
    "mustExist": {
      "label": "File Must Exist",
      "description": "Skip watching file if it's missing.",
      "tooltip": "Enabling this will skip watching the file if it does not exist when the application starts. Watching files that do not exist is still buggy and may not work at all."
    },
    "logMatch": {
      "label": "Log Matches",
      "description": "Write matched lines to notifiarr log.",
      "tooltip": "Enabling this will write the matched line to the notifiarr log. This is good for debugging, but may be noisy."
    }
  },
  "Commands": {
    "title": "Command List",
    "addInstance": "Create Command",
    "DeleteCommand": "Delete Command",
    "notes": "Commands are executed by the client (the backend). They can be triggered from this interface or from a chat server. If you modify a command you must save the configuration before you can run it from the Web UI.",
    "Executions": "Executions: {count}",
    "Failures": "Failures: {count}",
    "LastExecution": "Last Execution",
    "neverExecuted": "never executed",
    "enterCommandArguments": "Enter Command Arguments",
    "commandRequiresArguments": "This command requires {count, plural, one {one argument. Enter it below.} other {# arguments. Enter them below.}}",
    "noOutput": "No output yet. Try executing the command then click refresh.",
    "refreshed": "refreshed {timeDuration} ago",
    "regexMismatch": "Argument does not match regular expression.",
    "name": {
      "label": "Name",
      "description": "Name of the command. Shows up in the log and in notifications.",
      "placeholder": "custom name for notifications"
    },
    "command": {
      "label": "Command",
      "description": "Command to run.",
      "placeholder": "echo 'Hello, world!'",
      "tooltip": "This is the command that will execute when triggered.<br />Click the double-check icon to run the command right now. After it finishes, click refresh and show output to see the results.<br /><br />Check the box to wrap the command in a shell. On Windows, this will run the command with <code>cmd.exe</code> and on other operating systems, it will run the command with <code>/bin/bash</code>. This is useful for commands that require shell features like pipes and redirects. Custom positional arguments may be defined with this format: <code>({regex})</code> - that is a regular expression wrapped in curly braces and parentheses, ie. <code>({[a-z]})</code>. These arguments may be filled in by the person running the command; either in this Web UI or on your chat server. If a command has an argument, it is required; if it has multiple arguments, they're all required.<br /><br /> <h5>Examples</h5>Command using two arguments: <code>/bin/ls ({-la|-l|-a|-al}) ({/tmp|/|/home|/lib})</code><br />The above command will allow a user to do any combination of <code>ls -la</code> on either <code>/tmp</code>, <code>/</code>, <code>/home</code>, or <code>/lib</code>.<br /> This command can be used to curl websites from within the scratch Docker container: <code>/notifiarr --curl ({https?://[^ ;]+})</code>"
    },
    "notify": {
      "label": "Notify",
      "description": "Send notification after command is executed.",
      "tooltip": "Receive a notification containing the command output."
    },
    "log": {
      "label": "Log Output",
      "description": "Log command output.",
      "tooltip": "Log the command output to this client's application log."
    },
    "timeout": {
      "label": "Maximum Run Duration",
      "description": "How long the command may run before termination."
    }
  },
  "scheduler": {
    "title": "Schedule",
    "daysOfWeek": "Days of week",
    "daysOfMonth": "Days of month",
    "frequency": "Frequency",
    "selectAFrequency": "Select a frequency to create a schedule.",
    "AddATime": "Add a time",
    "empty": "If you want to run every day, select the Daily Frequency.",
    "required": {
      "daysOfWeek": "Must select at least one day of the week.",
      "daysOfMonth": "Must select at least one day of the month.",
      "atTimes": "Must select at least one time to run the schedule."
    },
    "ops": {
      "noSchedule": "No Schedule",
      "minutely": "Minutely",
      "hourly": "Hourly",
      "daily": "Daily",
      "weekly": "Weekly",
      "monthly": "Monthly"
    },
    "times": {
      "noneSelected": "(none selected)",
      "noDaysSelected": "(no days selected)",
      "everyMinute": "{count, plural, one {One time} other {# times}} every minute at seconds {times}",
      "everyHour": "{count, plural, one {One time} other {# times}} every hour at minute:seconds {times}",
      "everyDay": "{count, plural, one {One time} other {# times}} every day at times {times}",
      "everyWeek": "{count, plural, one {One time} other {# times}} every week on {daysOfWeek} at times {times}",
      "everyMonth": "{count, plural, one {One time} other {# times}} every month on days {daysOfMonth} at times {times}"
    }
  },
  "Endpoints": {
    "title": "Relay URLs",
    "addInstance": "Add Relay URL",
    "DeleteEndpoint": "Delete URL",
    "badge": {
      "header": "{count, plural, one {1 header} other {# headers}}",
      "query": "{count, plural, one {1 query} other {# queries}}",
      "body": "{count, plural, one {1 character} other {# characters}}"
    },
    "name": {
      "label": "Name",
      "description": "Name of the relay URL.",
      "placeholder": "custom name for notifications"
    },
    "template": {
      "label": "Payload Template",
      "description": "Parse payload into this template.",
      "placeholder": "pihole",
      "tooltip": "The template is used by the website to figure out how to turn the payload into a chat notification. Find a list of available templates or create your own on <a href=\"https://notifiarr.com/\" target=\"_new\">the website</a> @ <code>Integrations: Endpoints</code>.",
      "required": "A template is required. Enter 'test' if you are not sure what to enter."
    },
    "timeout": {
      "label": "Request Timeout",
      "description": "How long to wait for the HTTP request to complete."
    },
    "method": { "label": "Method", "description": "HTTP Request" },
    "url": {
      "label": "Relay URL",
      "description": "URL for remote service that gets relayed to the website.",
      "placeholder": "https://pihole.myhome.lan/api/stats"
    },
    "header": {
      "label": "HTTP Headers",
      "description": "HTTP Request Headers, 1 per line.",
      "placeholder": "Content-Type: application/json",
      "tooltip": "The HTTP request headers are sent to the URL as is. The format must be <code>key: value</code> per line. The space and colon are required. Invalid values are ignored and extra spaces are trimmed."
    },
    "query": {
      "label": "Query Parameters",
      "description": "Query parameters to add to the URL, 1 per line.",
      "placeholder": "apiKey=1234567890",
      "tooltip": "The query parameters are appended to the URL. The format must be <code>key=value</code> per line. Invalid values are ignored and extra spaces are trimmed. Do not include the <code>?</code> character or ampersand (<code>&</code>) at the beginning of a line. Keys and values are automatically URL encoded."
    },
    "body": {
      "label": "Request Body",
      "description": "The body sent to the URL for POST, PUT and PATCH requests.",
      "placeholder": "{\"message\": \"Hello, world!\"}"
    }
  },
  "metrics": {
    "CountersReset": "The counters on this page reset when the application exits.",
    "ApplicationUptime": "Application Uptime: &nbsp;<b>{timeDuration}</b>",
    "logFiles": {
      "title": "Log Files",
      "description": "Log file counters.",
      "empty": "No log files found."
    },
    "apiHits": {
      "title": "API Requests",
      "description": "Incoming API request counters.",
      "empty": "No API requests yet."
    },
    "httpRequests": {
      "title": "HTTP Requests",
      "description": "Incoming HTTP request statistics. This includes websocket tunnel requests.",
      "empty": "No HTTP requests yet."
    },
    "website": {
      "title": "Website Requests",
      "description": "Requests to Notifiarr.com.",
      "empty": "No website requests yet."
    },
    "fileWatcher": {
      "title": "File Watcher",
      "description": "File watcher statistics.",
      "empty": "No file watchers configured."
    },
    "apps": {
      "title": "Application Requests",
      "description": "Application request statistics. These counters do not include service checks.",
      "empty": "No application requests yet."
    },
    "timerEvents": {
      "title": "Triggered Actions",
      "description": "Triggers, timers and schedules executed.",
      "empty": "No triggered actions yet."
    }
  },
  "monitoring": {
    "ConfigureServices": "Configure the service checks displayed on the <goto-page page=\"services\">Services page</goto-page>.",
    "ChecksDisabled": "Service Checks: Disabled",
    "ChecksStopped": "Service Checks: Stopped",
    "EnableOnConfig": "Enable service checks on the <goto-page page=\"configuration\">Configuration</goto-page> page.",
    "StartChecks": "Start Service Checks",
    "StopChecks": "Stop Service Checks",
    "stopFailed": "Failed to stop service checks.",
    "startFailed": "Failed to start service checks.",
    "recheckFailed": "Failed to recheck service.",
    "checkInitiated": "Service check initiated.",
    "nextRefresh": "Next refresh in {timeDuration}.",
    "refreshInterval": "Refresh Interval",
    "cardsView": "Cards View",
    "classicView": "Classic View",
    "hideAllOutputs": "Hide All Outputs",
    "showAllOutputs": "Show All Outputs",
    "check": {
      "name": "Service Name",
      "state": { "short": "State", "title": "Service Check Counters" },
      "typeExpect": "Type/Expect",
      "last": {
        "short": "Last",
        "title": "Last Check: {timeDuration} ago",
        "tooltip": "How long ago this service was checked.",
        "description": "Service last checked at"
      },
      "since": {
        "short": "Since",
        "title": "Time in state: {timeDuration}",
        "tooltip": "How long the service has been in this state.",
        "description": "Service has been in this state since"
      },
      "interval": {
        "short": "Interval",
        "title": "Check Interval",
        "tooltip": "How often this service is checked."
      },
      "output": "Last Check Output"
    }
  },
  "ServiceChecks": {
    "title": "Health Checks",
    "DeleteCheck": "Delete Health Check",
    "addInstance": "Create Health Check",
    "description": "Use this form to configure service checks. Do not add starr, media, snapshot, or downloader apps here. Give them a check interval on their respective configuration pages instead. Disable and Enable service health checks in whole on the <goto-page page=\"configuration\">Configuration</goto-page> page. View running service health information on the <goto-page page=\"monitoring\">Monitoring</goto-page> page.",
    "processListLink": "View the running process list here.",
    "timeout": {
      "label": "Check Timeout",
      "description": "How long to wait for the service check to complete."
    },
    "interval": {
      "label": "Check Interval",
      "description": "How often to check the service."
    },
    "name": {
      "label": "Check Name",
      "description": "Unique name for the service being monitored.",
      "placeholder": "custom name for notifications",
      "tooltip": "The name of the service being monitored. This is used to identify the service in notifications. Each service must have a unique name."
    },
    "type": {
      "label": "Check Type",
      "description": "The type of check to perform.",
      "tooltip": "The Process check type allows you to monitor that a process is running. The HTTP URL check type allows you to monitor a URL for reachability. The TCP Port check type allows you to monitor a TCP port's connectivity. Both Ping check types allow monitoring an IP or host for reachability.",
      "options": {
        "process": "Process Check",
        "http": "HTTP URL Check",
        "tcp": "TCP Port Reachability",
        "ping": "UDP Ping Check",
        "icmp": "ICMP Ping Check"
      }
    },
    "url": {
      "label": "URL",
      "description": "URL of the service being monitored.",
      "placeholder": "https://my.site"
    },
    "http": {
      "headers": {
        "label": "HTTP Headers",
        "description": "HTTP request headers, 1 per line.",
        "placeholder": "Content-Type: application/json"
      },
      "codes": {
        "label": "Acceptable Response Codes",
        "description": "Any code here is considered acceptable. If the service responds with another code a notification is generated.",
        "required": "At least one expected response code is required."
      }
    },
    "tcp": {
      "value": {
        "label": "Host and Port",
        "description": "Enter host:port or host:ip to check connectivity.",
        "placeholder": "127.0.0.1:22",
        "tooltip": "An IP address is generally recommended. If you also want to test DNS, use a hostname. The format is <code>host:port</code>. There should be no spaces or extra characters.",
        "required": "A host and port separated with a colon are required."
      }
    },
    "ping": {
      "value": {
        "label": "Host or IP",
        "description": "Enter host or ip to check reachability.",
        "placeholder": "127.0.0.1",
        "tooltip": "An IP address is generally recommended. If you also want to test DNS, use a hostname. The format is <code>host</code> or <code>10.11.12.13</code>. There should be no spaces or extra characters. To allow UDP checks to work on Linux, you must enable them with this command: <code>sudo sysctl -w net.ipv4.ping_group_range=\"0 2147483647\"</code>. To allow ICMP checks in Linux, you must give the notifiarr binary capabilities with this command: <code>sudo setcap cap_net_raw=+ep /usr/bin/notifiarr</code>. Easiest way to make both work in Docker is to enable privileged mode, but you may set capabailities too.",
        "required": "A host or IP address is required."
      },
      "count": {
        "label": "Count",
        "description": "Number of packets to send.",
        "placeholder": "10",
        "required": "A count of packets greater than zero is required."
      },
      "minimum": {
        "label": "Minimum",
        "description": "Minimum number of packets that must be received.",
        "placeholder": "10",
        "required": "A minimum number of packets greater than zero is required."
      },
      "interval": {
        "label": "Interval",
        "description": "Interval in milliseconds between packets.",
        "placeholder": "100"
      }
    },
    "process": {
      "value": {
        "label": "Process Match",
        "description": "The name of the process to check.",
        "placeholder": "notifiarr",
        "tooltip": "The name of the process to check. This is the name of the process as it appears in the process list. A wildcard string match is used on both ends of the value provided, so the more specific your arguments the better the match will be.",
        "required": "A process name is required."
      },
      "running": {
        "label": "Running",
        "description": "Send an alert if the process is running.",
        "tooltip": "Selecting this will trigger an unhealthy alert if the process is found running. Select this option if you need a notification when the process starts."
      },
      "restarts": {
        "label": "Restarts",
        "description": "Send an alert if the process has restarted.",
        "tooltip": "Selecting this will trigger an unhealthy alert if the process is found to have restarted. Select this option if you need a notification when the PID changes."
      },
      "minimum": {
        "label": "Minimum",
        "description": "Minimum number of running processes that must match the value.",
        "required": "A minimum number of processes greater than zero is required.",
        "tooltip": "If you enter 2, then you will receive a notification if there are fewer than 2 processes running. Use this to be alerted if there are too few processes running."
      },
      "maximum": {
        "label": "Maximum",
        "description": "Maximum number of running processes that may match the value.",
        "tooltip": "If you enter 2, then you will receive a notification if there are more than 2 processes running. Use this to be alerted if there are too many processes running."
      }
    }
  },
  "Actions": {
    "titles": {
      "Triggers": "Triggers",
      "Timers": "Timers",
      "Schedules": "Schedules",
      "SiteCrons": "Website Timers",
      "Counter": "Counter",
      "Interval": "Interval",
      "Schedule": "Schedule"
    },
    "descriptions": {
      "Triggers": "These actions have no timer and no schedule.",
      "Timers": "These actions have a timer.",
      "Schedules": "These actions have a schedule.",
      "SiteCrons": "These actions are created by the website to offload timer tracking."
    },
    "key": {
      "TrigPlexEmptyTrash": "Empty Plex trash",
      "TrigUploadFile": "Log file uploaded to website",
      "TrigPlexSessions": "Collect Plex sessions",
      "TrigPlexSessionsCheck": "Check for finished Plex sessions",
      "TrigDashboard": "Dashboard update",
      "TrigMDBListSync": "MDB list sync",
      "TrigCollectionGaps": "Collection gaps",
      "TrigCFSyncLidarr": "Lidarr profile and format sync",
      "TrigCFSyncRadarr": "Radarr profile and format sync",
      "TrigRPSyncSonarr": "Sonarr profile and format sync",
      "TrigStop": "Client reloads",
      "TrigSnapshot": "Snapshot collection",
      "TrigProwlarrCorrupt": "Prowlarr database corruption",
      "TrigLidarrCorrupt": "Lidarr database corruption",
      "TrigRadarrCorrupt": "Radarr database corruption",
      "TrigReadarrCorrupt": "Readarr database corruption",
      "TrigSonarrCorrupt": "Sonarr database corruption",
      "TrigProwlarrBackup": "Prowlarr database backups",
      "TrigLidarrBackup": "Lidarr database backups",
      "TrigRadarrBackup": "Radarr database backups",
      "TrigReadarrBackup": "Readarr database backups",
      "TrigSonarrBackup": "Sonarr database backups",
      "TrigUpCheck": "Client to website up-check",
      "TrigEndpointURL": "Endpoint URL relayed to website: {name}",
      "TrigCustomCommand": "Custom command: {name}",
      "TrigAutoUpdate": "Auto-update update check",
      "TrigCFSyncLidarrInt": "Lidarr custom format sync per instance",
      "TrigCFSyncRadarrInt": "Radarr custom format sync per instance",
      "TrigRPSyncSonarrInt": "Sonarr custom format sync per instance",
      "TrigCustomCronTimer": "Website timer: {name}",
      "TrigDownloadingItems": "Downloading / finished items",
      "TrigLidarrQueue": "Lidarr queue cacher",
      "TrigRadarrQueue": "Radarr queue cacher",
      "TrigReadarrQueue": "Readarr queue cacher",
      "TrigSonarrQueue": "Sonarr queue cacher",
      "TrigStuckItems": "Stuck items check",
      "TrigPollSite": "Site poller"
    }
  }
}
